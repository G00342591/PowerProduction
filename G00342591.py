# Assessment Details
# The goal of this assignment is use machine learning to make predictins based on a given dataset
# Predict wind turbine power from wind turbine speed
# Respond the predicted power using a http request on a webservice

# Using the pandas library we can import the given cvs dataset provided
# https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html

# Import the pandas library as pd and numpy as np
import pandas as pd
import numpy as np

# Current path im using 
# powerproduction.cvs
path = input("Enter dataset path: ")
turbineData = pd.read_csv(path)

# Through Supervised learning we can find the link between the two datasets then 
# using the scikit library we can fit then predict the model. 
# By using using a Supervised Learning algoritm known as Regression 
# which predicts continious outputs as oppossed to set labels(classification)
# We can use nueral networking in order to achieve regression. 
# Nueral networking is a part of deep learning which is a subset of machine learning 
# and is often used to mimic human brain functions 
# https://www.codecademy.com/articles/regression-vs-classification

# First we import sckitlearn 
from sklearn.neural_network import MLPRegressor

# Secondly we split the dataset into x and y
# We us iloc.[:,0] to use all data from the first row
# We can also do this by calling the data header itself
x = turbineData.iloc[:,0].values.reshape((-1, 1))
y = turbineData['power']
# https://www.kdnuggets.com/2019/06/select-rows-columns-pandas.html

# We use relu as it results in a value greater than 0 as we cant have negative power
# Here we train the nueral network
model = MLPRegressor(activation='relu',max_iter=100000)
model.fit(x,y)

# Input new power to measure new speed
speed = input("Enter any number: ")
# Convert speed to float
floatSpeed = None
if speed.isdigit():
   floatSpeed = float(speed)
else:
    print("No float inputted")

# Make a prediction based off the model and using the inputted power value
# While any number above 0 returns a positive float. This is in order
# to prevent 0 being a negative
newPower = model.predict([[floatSpeed]])
if newPower < 0:
    newPower = 0

# Convert to String so we can view it on the webpage
newPower = str(newPower)

# Import flask
import flask as fl
app = fl.Flask(__name__)

@app.route("/", methods=['GET','POST'])
def home():
  return {"Power generated by current speed: ": newPower}